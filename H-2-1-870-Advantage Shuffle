class Solution {
	public int[] advantageCount(int[] nums1, int[] nums2) {
		Arrays.sort(nums1);
		int n = nums2.length;

		// Create an array of pairs (value, index) for nums2 and sort by value
		int[][] nums2WithIndices = new int[n][2];
		for (int i = 0; i < n; i++) {
			nums2WithIndices[i][0] = nums2[i];
			nums2WithIndices[i][1] = i;
		}
		Arrays.sort(nums2WithIndices, Comparator.comparingInt(a -> a[0]));

		int left = 0, right = n - 1;
		int[] result = new int[n];

		// Use a two-pointer technique to assign elements
		for (int num : nums1) {
			if (num > nums2WithIndices[left][0]) {
				result[nums2WithIndices[left][1]] = num;
				left++;
			} else {
				result[nums2WithIndices[right][1]] = num;
				right--;
			}
		}

		return result;
	}
}
https://leetcode.com/problems/advantage-shuffle/description/
