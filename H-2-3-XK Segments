import java.util.Arrays;
import java.util.Scanner;

public class XKSegments {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int k = scanner.nextInt();
        long[] arr = new long[n];

        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextLong();
        }

        Arrays.sort(arr);
        long count = 0;

        for (int i = 0; i < n; i++) {
            long current = arr[i];
            long low, high;

            if (k == 0) {
                // When k is 0, we are looking for pairs within the same segment
                low = current;
                // Calculate high as the maximum value in the current segment
                high = ((current + x - 1) / x) * x - 1;
            } else {
                // Calculate the base segment index
                long base = (current + x - 1) / x + k - 1;
                low = base * x;
                high = (base + 1) * x - 1;
            }

            // Find the indices using binary search
            int leftIndex = lowerBound(arr, low);
            int rightIndex = upperBound(arr, high);

            // Count the valid pairs
            count += (rightIndex - leftIndex);
        }

        System.out.println(count);
    }

    // Binary search to find the lower bound
//return the target or num greater than target
    private static int lowerBound(long[] arr, long key) {
        int low = 0;
        int high = arr.length;// if target is greater than all the element of array
        while (low < high) {
            int mid = (low + high) / 2;
            if (arr[mid] < key) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    // Binary search to find the upper bound
return strictly greater than target
    private static int upperBound(long[] arr, long key) {
        int low = 0;
        int high = arr.length;// incase if the target is present on last index so index+1 will the ans
        while (low < high) {
            int mid = (low + high) / 2;
            if (arr[mid] <= key) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}
//https://codeforces.com/problemset/problem/895/B
