.https://www.spoj.com/problems/YODANESS/
import java.util.*;
 
public class Main {
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt();
        
        while (T-- > 0) {
            int n = scanner.nextInt();
            String[] yodaWords = new String[n];
            String[] correctWords = new String[n];
            Map<String, Integer> wordToIndex = new HashMap<>();
            
            for (int i = 0; i < n; i++) {
                yodaWords[i] = scanner.next();
            }
            
            for (int i = 0; i < n; i++) {
                correctWords[i] = scanner.next();
                wordToIndex.put(correctWords[i], i);
            }
            
            int[] indices = new int[n];
            for (int i = 0; i < n; i++) {
                indices[i] = wordToIndex.get(yodaWords[i]);
            }
            
            System.out.println(countInversions(indices));
        }
        
        scanner.close();
    }
    
    // Function to count inversions using merge sort
    private static int countInversions(int[] arr) {
        int[] temp = new int[arr.length];
        return mergeSortAndCount(arr, temp, 0, arr.length - 1);
    }
    
    private static int mergeSortAndCount(int[] arr, int[] temp, int left, int right) {
        int mid, invCount = 0;
        if (left < right) {
            mid = (left + right) / 2;
            
            invCount += mergeSortAndCount(arr, temp, left, mid);
            invCount += mergeSortAndCount(arr, temp, mid + 1, right);
            
            invCount += mergeAndCount(arr, temp, left, mid, right);
        }
        return invCount;
    }
    
    private static int mergeAndCount(int[] arr, int[] temp, int left, int mid, int right) {
        int i = left; // Starting index for left subarray
        int j = mid + 1; // Starting index for right subarray
        int k = left; // Starting index to be sorted
        int invCount = 0;
        
        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
                invCount += (mid + 1) - i; // Count inversions
            }
        }
        
        while (i <= mid) {
            temp[k++] = arr[i++];
        }
        
        while (j <= right) {
            temp[k++] = arr[j++];
        }
        
        for (i = left; i <= right; i++) {
            arr[i] = temp[i];
        }
        
        return invCount;
    }
} 
