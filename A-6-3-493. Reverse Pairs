public class Solution {
	public int reversePairs(int[] nums) {
		if (nums == null || nums.length == 0) return 0;
		return mergeSortAndCount(nums, 0, nums.length - 1);
	}

	private static int mergeSortAndCount(int[] nums, int left, int right) {
		if (left >= right) {
			return 0;
		}
		int mid = left + (right - left) / 2;
		int count = mergeSortAndCount(nums, left, mid) + mergeSortAndCount(nums, mid + 1, right);
		count += mergeAndCount(nums, left, mid, right);
		return count;
	}

private static int mergeAndCount(int[] nums, int left, int mid, int right) {
		int count = 0;
		int j = mid + 1;

		// Count reverse pairs
		for (int i = left; i <= mid; i++) {
			while (j <= right && nums[i] > 2L * nums[j]) {
				j++;
			}
			count += j - (mid + 1);
		}

		int leftArr[] = Arrays.copyOfRange(nums, left, mid+1);
		int rightArr[] = Arrays.copyOfRange(nums, mid+1,right+1);

		int i =0 ;
		j = 0;
		while (i < leftArr.length && j < rightArr.length) {
			if(leftArr[i]<rightArr[j])
			{
				nums[left] = leftArr[i++];
			}
			else
			{
				nums[left] = rightArr[j++];
			}
			left++;
		}

		while (i<leftArr.length) {
			nums[left++] = leftArr[i++];
		}
		while (j<rightArr.length) {
			nums[left++] = rightArr[j++];
		}

		return count;
	}

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class Solution {
	public int reversePairs(int[] nums) {
		if (nums == null || nums.length == 0) return 0;
		return mergeSort(nums, 0, nums.length - 1);
	}

	private int mergeSort(int[] nums, int left, int right) {
		if (left >= right) return 0;
		int mid = left + (right - left) / 2;
		int count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right);

		int j = mid + 1;
		for (int i = left; i <= mid; i++) {
			while (j <= right && nums[i] > 2L * nums[j]) {
				j++;
			}
			count += j - (mid + 1);
		}

		merge(nums, left, mid, right);
		return count;
	}

	private void merge(int[] nums, int left, int mid, int right) {
		int[] temp = new int[right - left + 1];
		int i = left, j = mid + 1, k = 0;
		while (i <= mid && j <= right) {
			if (nums[i] <= nums[j]) {
				temp[k++] = nums[i++];
			} else {
				temp[k++] = nums[j++];
			}
		}
		while (i <= mid) {
			temp[k++] = nums[i++];
		}
		while (j <= right) {
			temp[k++] = nums[j++];
		}
		for (i = 0; i < temp.length; i++) {
			nums[left + i] = temp[i];
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////
public class ReversePairsCount {

	// Merge function to merge two sorted subarrays
	static void merge(int[] arr, int low, int mid, int high) {
		// Calculate the lengths of the two subarrays
		int len1 = mid - low + 1;
		int len2 = high - mid;

		// Create temporary arrays to hold the subarrays
		int[] first = new int[len1];
		int[] second = new int[len2];

		// Copy data from the main array to the temporary arrays
		int k = low;
		for (int i = 0; i < len1; i++) {
			first[i] = arr[k++];
		}

		k = mid + 1;
		for (int i = 0; i < len2; i++) {
			second[i] = arr[k++];
		}

		// Merge the two subarrays back into the main array
		int i = 0, j = 0;
		k = low;
		while (i < len1 && j < len2) {
			// Compare and merge elements in sorted order
			if (first[i] <= second[j]) {
				arr[k++] = first[i++];
			} else {
				arr[k++] = second[j++];
			}
		}

		// Copy any remaining elements from the temporary arrays
		while (i < len1) {
			arr[k++] = first[i++];
		}

		while (j < len2) {
			arr[k++] = second[j++];
		}
	}

	// Function to count the reverse pairs using merge sort
	static int countReversePairs(int[] arr, int low, int mid, int high) {
		int cnt = 0;
		int j = mid + 1;
		for (int i = low; i <= mid; i++) {
			while (i <= high && arr[i] > 2 * arr[j]) {
				j++;
			}
			cnt += (j - (mid + 1));
		}
		return cnt;
	}

	// Merge Sort function to sort the array and count reverse pairs
	static int mergeSort(int[] arr, int low, int high) {
		int cnt = 0;
		if (low >= high) {
			return cnt;
		}
		int mid = low + (high - low) / 2;

		// Recursively count reverse pairs in left and right halves
		cnt += mergeSort(arr, low, mid);
		cnt += mergeSort(arr, mid + 1, high);

		// Merge the sorted halves and count reverse pairs
		cnt += countReversePairs(arr, low, mid, high);

		// Merge the two halves
		merge(arr, low, mid, high);

		return cnt;
	}

	
}



