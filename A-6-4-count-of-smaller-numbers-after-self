class Solution {
	private int[] count;  // Array to store the counts of smaller numbers after each element

	public List<Integer> countSmaller(int[] nums) {
		int n = nums.length;
		count = new int[n];
		int[] indices = new int[n];

		// Initialize the indices array
		for (int i = 0; i < n; i++) {
			indices[i] = i;
		}

		mergeSort(nums, indices, 0, n - 1);

		List<Integer> result = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			result.add(count[i]);
		}
		return result;
	}

	private void mergeSort(int[] nums, int[] indices, int left, int right) {
		if (left >= right) return;

		int mid = left + (right - left) / 2;
		mergeSort(nums, indices, left, mid);
		mergeSort(nums, indices, mid + 1, right);

		merge(nums, indices, left, mid, right);
	}

	private void merge(int[] nums, int[] indices, int left, int mid, int right) {
		int[] tempIndices = new int[right - left + 1];
		int i = left, j = mid + 1, k = 0;
		int rightCount = 0;  // Number of elements from the right side that have been moved

		while (i <= mid && j <= right) {
			if (nums[indices[j]] < nums[indices[i]]) {
				tempIndices[k] = indices[j++];
				rightCount++;
			} else {
				count[indices[i]] += rightCount;
				tempIndices[k] = indices[i++];
			}
            ++k;
		}

		while (i <= mid) {
			count[indices[i]] += rightCount;
			tempIndices[k++] = indices[i++];
		}

		while (j <= right) {
			tempIndices[k++] = indices[j++];
		}

		for (int p = 0; p < tempIndices.length; p++) {
			indices[left + p] = tempIndices[p];
		}
	}
}
