https://www.hackerearth.com/problem/algorithm/tuples/

import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        InputStreamReader inputStreamReader = new InputStreamReader(System.in);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
        int test = Integer.parseInt(bufferedReader.readLine().trim());
        while (test-- > 0) {
            int currentTestCaseArraySize = Integer.parseInt(bufferedReader.readLine().trim());
            long arr[] = new long[currentTestCaseArraySize];
            String[] arrInStrings = bufferedReader.readLine().trim().split(" ");
            for (int i = 0; i < arrInStrings.length; i++) {
                arr[i] = Long.parseLong(arrInStrings[i]);
            }

            // Create lists instead of fixed size arrays to avoid size issues
            List<Long> equationOne = new ArrayList<>();
            List<Long> equationTwo = new ArrayList<>();

            // Calculate a*b + c
            for (long a : arr) {
                for (long b : arr) {
                    for (long c : arr) {
                        equationOne.add(a * b + c);
                    }
                }
            }

            // Calculate (f + e) * d
            for (long d : arr) {
                if (d == 0) continue;  // skip if d is 0
                for (long e : arr) {
                    for (long f : arr) {
                        equationTwo.add((f + e) * d);
                    }
                }
            }

            // Convert lists to arrays for sorting and binary search
            long[] equtionOneArr = equationOne.stream().mapToLong(Long::longValue).toArray();
            long[] equtionTwoArr = equationTwo.stream().mapToLong(Long::longValue).toArray();

            Arrays.sort(equtionOneArr);
            Arrays.sort(equtionTwoArr);

            int count = 0;

            // Find counts of equationOne values in equationTwo
            for (long target : equtionOneArr) {
                int leftIndex = binarySearchLeft(target, equtionTwoArr);
                int rightIndex = binarySearchRight(target, equtionTwoArr);
                if (leftIndex != -1) {
                    count += rightIndex - leftIndex + 1;
                }
            }

            System.out.println(count);
        }

        bufferedReader.close();
        inputStreamReader.close();
    }

    private static int binarySearchRight(long target, long[] eqution) {
        int low = 0, hi = eqution.length - 1;
        while (low <= hi) {
            int mid = low + (hi - low) / 2;
            if (eqution[mid] == target) {
                if (mid == eqution.length - 1 || eqution[mid + 1] != target) {
                    return mid;
                }
                low = mid + 1;
            } else if (eqution[mid] > target) {
                hi = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }

    private static int binarySearchLeft(long target, long[] eqution) {
        int low = 0, hi = eqution.length - 1;
        while (low <= hi) {
            int mid = low + (hi - low) / 2;
            if (eqution[mid] == target) {
                if (mid == 0 || eqution[mid - 1] != target) {
                    return mid;
                }
                hi = mid - 1;
            } else if (eqution[mid] > target) {
                hi = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }
}
